{"ast":null,"code":"import _slicedToArray from\"/home/emarks/brown-egg-hunt/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React from\"react\";import{jsx as _jsx}from\"react/jsx-runtime\";var CountDownTimer=function CountDownTimer(_ref){var targetDate=_ref.targetDate;function timeRemaining(targetDate){var currentTime=Date.now();var timeDifference=targetDate-currentTime;var secsFactor=1000;var minsFactor=secsFactor*60;var hrsFactor=minsFactor*60;var hrs=Math.floor(timeDifference/hrsFactor);var mins=Math.floor((timeDifference-hrs*hrsFactor)/minsFactor);var secs=Math.floor((timeDifference-hrs*hrsFactor-mins*minsFactor)/secsFactor);var outputString=\"\".concat(hrs.toString().padStart(1,\"0\"),\":\").concat(mins.toString().padStart(2,\"0\"),\":\").concat(secs.toString().padStart(2,\"0\"));if(timeDifference>0){return outputString;}else{return outputString+' IMPORTANT: You will need to reload your browser for new hints to appear';}}/* A bunch of copy-pasted garbage code so this page will update every second */var _ref2={},_ref2$hours=_ref2.hours,hours=_ref2$hours===void 0?0:_ref2$hours,_ref2$minutes=_ref2.minutes,minutes=_ref2$minutes===void 0?0:_ref2$minutes,_ref2$seconds=_ref2.seconds,seconds=_ref2$seconds===void 0?60:_ref2$seconds;var _React$useState=React.useState([hours,minutes,seconds]),_React$useState2=_slicedToArray(_React$useState,2),_React$useState2$=_slicedToArray(_React$useState2[0],3),hrs=_React$useState2$[0],mins=_React$useState2$[1],secs=_React$useState2$[2],setTime=_React$useState2[1];var tick=function tick(){if(hrs===0&&mins===0&&secs===0)reset();else if(mins===0&&secs===0){setTime([hrs-1,59,59]);}else if(secs===0){setTime([hrs,mins-1,59]);}else{setTime([hrs,mins,secs-1]);}};var reset=function reset(){return setTime([parseInt(hours),parseInt(minutes),parseInt(seconds)]);};React.useEffect(function(){var timerId=setInterval(function(){return tick();},1000);return function(){return clearInterval(timerId);};});return/*#__PURE__*/_jsx(\"span\",{children:timeRemaining(targetDate)});};export default CountDownTimer;","map":{"version":3,"sources":["/home/emarks/brown-egg-hunt/src/CountDown.js"],"names":["React","CountDownTimer","targetDate","timeRemaining","currentTime","Date","now","timeDifference","secsFactor","minsFactor","hrsFactor","hrs","Math","floor","mins","secs","outputString","toString","padStart","hours","minutes","seconds","useState","setTime","tick","reset","parseInt","useEffect","timerId","setInterval","clearInterval"],"mappings":"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","sourcesContent":["import React from \"react\";\n\nconst CountDownTimer = ({ targetDate }) => {\n  function timeRemaining(targetDate) {\n    const currentTime = Date.now();\n    const timeDifference = targetDate - currentTime;\n    const secsFactor = 1000;\n    const minsFactor = secsFactor * 60;\n    const hrsFactor = minsFactor * 60;\n\n    const hrs = Math.floor(timeDifference / hrsFactor);\n    const mins = Math.floor((timeDifference - hrs * hrsFactor) / minsFactor);\n    const secs = Math.floor(\n      (timeDifference - hrs * hrsFactor - mins * minsFactor) / secsFactor\n    );\n    const outputString = `${hrs.toString().padStart(1, \"0\")}:${mins\n      .toString()\n      .padStart(2, \"0\")}:${secs.toString().padStart(2, \"0\")}`;\n    if (timeDifference > 0) {\n      return outputString;\n    } else {\n      return outputString + ' IMPORTANT: You will need to reload your browser for new hints to appear'\n    }\n  }\n\n  /* A bunch of copy-pasted garbage code so this page will update every second */\n  const { hours = 0, minutes = 0, seconds = 60 } = {};\n  const [[hrs, mins, secs], setTime] = React.useState([\n    hours,\n    minutes,\n    seconds,\n  ]);\n\n  const tick = () => {\n    if (hrs === 0 && mins === 0 && secs === 0) reset();\n    else if (mins === 0 && secs === 0) {\n      setTime([hrs - 1, 59, 59]);\n    } else if (secs === 0) {\n      setTime([hrs, mins - 1, 59]);\n    } else {\n      setTime([hrs, mins, secs - 1]);\n    }\n  };\n\n  const reset = () =>\n    setTime([parseInt(hours), parseInt(minutes), parseInt(seconds)]);\n\n  React.useEffect(() => {\n    const timerId = setInterval(() => tick(), 1000);\n    return () => clearInterval(timerId);\n  });\n\n  return <span>{timeRemaining(targetDate)}</span>;\n};\n\nexport default CountDownTimer;\n"]},"metadata":{},"sourceType":"module"}